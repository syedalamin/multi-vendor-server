generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//* user
model User {
  id                 String      @id @unique @default(uuid())
  email              String      @unique
  password           String
  role               UserRole
  needPasswordChange Boolean?    @default(true)
  status             UserStatus? @default(ACTIVE)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt()
  admin              Admin?
  customer           Customer?
  cart               Cart[]
  vendor             Vendor?
  product            Product[]
  rating             Rating[]
  order              Order[]     @relation("CustomerOrders")
  sellerOrders       Order[]     @relation("SellerOrders")
  invoice            Invoice[]

  @@map("users")
}

// * admin

model Admin {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  address       String?
  gender        Gender?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()
  user          User     @relation(fields: [email], references: [email])

  @@map("admins")
}

model Vendor {
  id            String   @id @default(uuid())
  email         String   @unique
  shopName      String
  shopSlug      String   @unique
  logo          String?
  banner        String?
  description   String?
  rating        Decimal  @default(0)
  averageRating Decimal  @default(0)
  contactNumber String
  district      String
  city          String
  isVerified    Boolean  @default(false)
  isBlocked     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  // products       Product[]
}

model Customer {
  id            String   @id @default(uuid())
  firstName     String?
  lastName      String?
  email         String   @unique
  profilePhoto  String?
  contactNumber String?
  address       String?
  gender        Gender?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("customer")
}

model Category {
  id          String        @id @default(uuid())
  name        String
  slug        String
  image       String
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  subCategory SubCategory[]

  @@map("category")
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String
  slug       String
  image      String
  categoryId String
  isDeleted  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  category   Category  @relation(fields: [categoryId], references: [id])
  product    Product[]

  @@map("subCategory")
}

model District {
  id   String @id @default(uuid())
  name String
  city City[]

  @@map("districts")
}

model City {
  id         String   @id @default(uuid())
  name       String
  districtId String
  district   District @relation(fields: [districtId], references: [id])

  @@map("cities")
}

model Product {
  id            String        @id @default(uuid())
  name          String
  sku           String        @unique
  description   String
  productImages String[]
  slug          String
  price         Decimal
  stock         Int
  discount      Decimal       @default(0)
  status        ProductStatus @default(ACTIVE)
  rating        Decimal       @default(0)
  averageRating Decimal       @default(0)
  sellerId      String
  subCategoryId String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subCategory   SubCategory   @relation(fields: [subCategoryId], references: [id])
  seller        User          @relation(fields: [sellerId], references: [id])
  cart          Cart[]
  orderItem     OrderItem[]
  ratings       Rating[]
}

model Rating {
  id        String   @id @default(uuid())
  value     Float
  review    String
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Cart {
  id              String     @id @default(uuid())
  userId          String
  productId       String
  productName     String
  productImage    String
  quantity        Int
  basePrice       Decimal
  price           Decimal
  discountPrice   Decimal    @default(0)
  discountAmount  Decimal    @default(0)
  discountPercent Decimal    @default(0)
  status          CartStatus @default(ACTIVE)
  isDeleted       Boolean    @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("cart")
}

model Order {
  id             String             @id
  userId         String
  sellerId       String
  totalAmount    Decimal
  paymentType    OrderPaymentType
  paymentStatus  OrderPaymentStatus
  status         OrderStatus
  deliveryCharge Decimal            @default(0)
  shippingInfo   Json
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  user           User               @relation("CustomerOrders", fields: [userId], references: [id])
  seller         User               @relation("SellerOrders", fields: [sellerId], references: [id])
  orderItem      OrderItem[]

  @@map("order")
}

model OrderItem {
  id            String   @id @default(uuid())
  orderId       String
  productId     String
  quantity      Int
  price         Decimal
  productImage  String
  discountPrice Decimal  @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orderItem     Order    @relation(fields: [orderId], references: [id])
  product       Product  @relation(fields: [productId], references: [id])

  @@map("orderItem")
}

model Invoice {
  id             String        @id
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  orderIds       String[]
  sellerIds      String[]
  totalAmount    Decimal
  deliveryCharge Decimal
  subTotal       Decimal
  createdAtList  DateTime[]
  shippingInfo   Json
  paymentType    String
  orderItems     InvoiceItem[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("invoice")
}

model InvoiceItem {
  id            String  @id @default(uuid())
  invoiceId     String
  invoice       Invoice @relation(fields: [invoiceId], references: [id])
  productId     String
  productImage  String
  productName   String
  quantity      Int
  price         Decimal
  discountPrice Decimal

  @@map("invoiceItem")
}

model HomePageImages {
  id               String   @id @default("home_page_single_entry")
  sliderImages     String[]
  heroImages       String[]
  hotDealImages    String[]
  hotMainImages    String[]
  reviewImages     String[]
  reviewMainImages String[]
  footerImages     String[]
  minutes          Decimal  @default(0)
  hours            Decimal  @default(0)

  @@map("homePageImages")
}



enum OrderPaymentStatus {
  PENDING
  PAID
  FAILED
}

enum OrderPaymentType {
  COD
  BKASH
  NOGOD
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

//! type
enum Gender {
  MALE
  FEMALE
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  CUSTOMER
  VENDOR
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

enum CartStatus {
  ACTIVE
  CHECKED_OUT
  SAVED_FOR_LATER
}









// //  sliderImages     String[]
// //   heroImages       String[]
// //   hotDealImages    String[]
// //   hotMainImages    String[]
// //   reviewImages     String[]
// //   reviewMainImages String[]
// //   footerImages     String[]

// model HomePageImages {
//   id           String   @id @default("home_page_single_entry")
//   sliderImages String[]

//   @@map("homePageImages")
// }

// model HomePageHeroImages {
//   id         String   @id @default("heroImage")
//   heroImages String[]

//   @@map("heroImages")
// }

// model HomePageHotDealImages {
//   id            String  @id @default("hotDealImage")
//   hotDealImages String?
//   minutes       Decimal @default(0)
//   hours         Decimal @default(0)

//   @@map("hotDealImages")
// }

// model HomePageHotMainImages {
//   id            String  @id @default("hotMainImage")
//   hotMainImages String?

//   @@map("hotMainImages")
// }

// model HomePageReviewImages {
//   id           String  @id @default("reviewImage")
//   reviewImages String?

//   @@map("reviewImages")
// }

// model HomePageReviewMainImages {
//   id               String  @id @default("reviewMainImage")
//   reviewMainImages String?

//   @@map("reviewMainImages")
// }

// model HomePageFooterImages {
//   id           String  @id @default("footerImage")
//   reviewImages String?

//   @@map("footerImages")
// }
