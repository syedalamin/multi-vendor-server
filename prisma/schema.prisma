// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//* user
model User {
  id                 String      @id @unique @default(uuid())
  email              String      @unique
  password           String
  role               UserRole
  needPasswordChange Boolean?    @default(true)
  status             UserStatus? @default(ACTIVE)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt()
  admin              Admin?
  customer           Customer?
  product            Product[]
  cart               Cart[]
  vendor             Vendor?

  @@map("users")
}

// * admin

model Admin {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  address       String?
  gender        Gender?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()
  user          User     @relation(fields: [email], references: [email])

  @@map("admins")
}

model Vendor {
  id            String   @id @default(uuid())
  email         String   @unique
  shopName      String
  shopSlug      String   @unique
  logo          String?
  banner        String?
  description   String?
  rating        Decimal       @default(0)
  averageRating Decimal       @default(0)
  contactNumber String
  address       String
  isVerified    Boolean  @default(false)
  isBlocked     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])
  
  // products       Product[]
}

model Customer {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  address       String?
  gender        Gender?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("customer")
}

model Category {
  id          String        @id @default(uuid())
  name        String
  slug        String
  image       String
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  subCategory SubCategory[]

  @@map("category")
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String
  slug       String
  image      String
  categoryId String
  isDeleted  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  category   Category  @relation(fields: [categoryId], references: [id])
  product    Product[]

  @@map("subCategory")
}

model Product {
  id            String        @id @default(uuid())
  name          String
  description   String
  productImages String[]
  slug          String
  price         Decimal
  stock         Int
  discount      Decimal       @default(0)
  status        ProductStatus @default(ACTIVE)
  rating        Decimal       @default(0)
  averageRating Decimal       @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  sellerId      String
  subCategoryId String
  subCategory   SubCategory   @relation(fields: [subCategoryId], references: [id])
  seller        User          @relation(fields: [sellerId], references: [id])
  cart          Cart[]
}

model Cart {
  id              String     @id @default(uuid())
  userId          String
  productId       String
  quantity        Int
  price           Decimal
  discountPrice   Decimal    @default(0)
  discountAmount  Decimal    @default(0)
  discountPercent Decimal    @default(0)
  status          CartStatus @default(ACTIVE)
  isDeleted       Boolean    @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("cart")
}

//! type
enum Gender {
  MALE
  FEMALE
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  CUSTOMER
  VENDOR
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

enum CartStatus {
  ACTIVE
  CHECKED_OUT
  SAVED_FOR_LATER
}
